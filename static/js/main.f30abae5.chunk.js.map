{"version":3,"sources":["theme.tsx","components/CurrencyIcons/assets/index.ts","components/CurrencyIcons/index.tsx","components/CurrencyCard.tsx","components/CurrencyCards.tsx","api/fx.ts","components/App.tsx","hooks/use-exchange-rates.ts","components/GlobalStyles.jsx","index.tsx"],"names":["QUERIES","containerStyles","css","SPACING_UNIT","iconURI","CAD","GBP","USD","CurrencyIconContainer","styled","div","CurrencyIcon","currency","src","CurrencyCardText","CurrencyCardContainer","displayName","nameI18N","toLowerCase","displayRate","rate","precision","toPrecision","CurrencyCard","exchangeRates","baseCurrency","exchangeRate","title","middle","CurrencyCardsContainer","CurrencyCards","map","getFx","a","response","FX_API_RESPONSE","AppHeader","header","AppTitle","h1","ContainerPlaceholder","SearchContainer","SearchInput","input","App","useState","queryFragment","setQueryFragment","setExchangeRates","useEffect","then","apiResponse","fx","useExchangeRates","handleSearchInputChange","useCallback","event","target","value","visibleExchangeRates","filter","Boolean","includes","filterSearchResults","placeholder","onChange","length","globalStyles","GlobalStyles","styles","adjustRem","window","innerWidth","document","documentElement","style","fontSize","addEventListener","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f30abae5.chunk.js","sourcesContent":["import { css } from '@emotion/react'\n\n/**\n * Istead of full-blown theming, constants are used.\n * This file also containes some style and component declarations that are used app-wide,\n * in the real world these would be implemented as part of a UI kit.\n */\n\n/**\n * To avoid having endless amounts of breakpoints, larger screen layouts will be \"stretched\" to fit screens\n * that are tablet-sized or above - this can be done with setting the root element font size dynamically, and\n * using rems as a unit for everything throughout the app.\n * The small is for mobile screens, which are typically portrait oriented, the medium is for tablets and above.\n * In a typical application a third screen size would be needed, or the small screen size styles should be written\n * with both mobile and tablet screens in mind.\n */\nexport const QUERIES = {\n\tsmall: '(max-width: 49.99rem)',\n\tmedium: '(min-width: 50rem)',\n}\n\n/**\n * For consistency and ease of maintenance, this unit will be used for spacing.\n */\nexport const SPACING_UNIT = 1 // in rems\n\n/**\n * The app's layout is simple, built from a series of containers that are rendered one after another vertically.\n * To avoid littering the DOM with unnecessary elements, it's enough to declare the styles that describe the size of\n * a container, and apply them to any element necessary (e.g. a section, a div or even a plain paragraph).\n */\nexport const containerStyles = css`\n\t@media ${QUERIES.small} {\n\t\twidth: calc(100% - ${SPACING_UNIT * 2}rem);\n\t\tmargin: 0 ${SPACING_UNIT}rem ${SPACING_UNIT}rem ${SPACING_UNIT}rem;\n\t}\n\t@media ${QUERIES.medium} {\n\t\twidth: 100%;\n\t\tmax-width: 50rem;\n\t\tmargin: 0 auto ${SPACING_UNIT}rem auto;\n\t}\n`\n","/**\n * Ideally this should be an auto-generated file containing SVGs as text, for inline use,\n * but CRA doesn't allow for that without ejecting this whole thing, which is out of scope.\n * But the goal here would've been to have inline SVGs in production, and regular old svg\n * files in the repo that designers can edit with their own tools.\n */\nexport const iconURI: { [key: string]: string } = {\n\tCAD: '/assets/CAD.svg',\n\tGBP: '/assets/GBP.svg',\n\tUSD: '/assets/USD.svg',\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { iconURI } from './assets'\nimport { CurrencyId } from '../../types'\nimport { SPACING_UNIT } from '../../theme'\n\nexport const CurrencyIconContainer = styled.div`\n\twidth: ${SPACING_UNIT * 4}rem;\n\theight: ${(SPACING_UNIT * 4) / 1.71}rem;\n\timg {\n\t\twidth: ${SPACING_UNIT * 4}rem;\n\t\theight: ${(SPACING_UNIT * 4) / 1.71}rem;\n\t\tobject-fit: cover;\n\t\tobject-position: center;\n\t}\n`\n\ntype CurrencyIconProps = {\n\tcurrency: CurrencyId\n}\n\nexport const CurrencyIcon = ({ currency }: CurrencyIconProps) => (\n\t<CurrencyIconContainer>{iconURI[currency] && <img src={iconURI[currency]} />}</CurrencyIconContainer>\n)\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { CurrencyId, ExchangeRates } from '../types'\n\nimport { SPACING_UNIT } from '../theme'\nimport { CurrencyIcon } from './CurrencyIcons'\n\nconst CurrencyCardText = styled.div`\n\tmargin-left: ${SPACING_UNIT}rem;\n`\n\nconst CurrencyCardContainer = styled.div`\n\tdisplay: flex;\n\tpadding: 0 ${SPACING_UNIT}rem 0 0;\n\tborder-left: ${SPACING_UNIT / 2}rem solid black;\n\th3,\n\tp {\n\t\tmargin: 0;\n\t\tline-height: ${SPACING_UNIT * 2}rem;\n\t}\n`\n\ntype CurrencyCardProps = {\n\texchangeRates: ExchangeRates\n\tbaseCurrency: CurrencyId\n}\n\n// NOTE: extract and test later, displayRate is incomplete (precision?) and buggy (see 'MOP' output)\nconst displayName = ({ nameI18N, currency }: { nameI18N?: string; currency: string }): string =>\n\tnameI18N ? nameI18N.toLowerCase() : currency\nconst displayRate = ({ rate, precision }: { rate: number; precision: number }): string =>\n\t`${(1 / rate).toPrecision(precision + 1)}`\n\nexport const CurrencyCard = ({ exchangeRates, baseCurrency }: CurrencyCardProps) => {\n\tconst { currency, nameI18N, exchangeRate, precision } = exchangeRates\n\treturn (\n\t\t<CurrencyCardContainer>\n\t\t\t<CurrencyIcon currency={currency} />\n\t\t\t<CurrencyCardText>\n\t\t\t\t<h3 title=\"currency name\">{displayName({ nameI18N, currency })}&nbsp;</h3>\n\t\t\t\t{exchangeRate ? (\n\t\t\t\t\t<p title=\"currency exchange rate\">\n\t\t\t\t\t\t1 {currency} = {displayRate({ rate: exchangeRate.middle, precision })} {baseCurrency}\n\t\t\t\t\t</p>\n\t\t\t\t) : (\n\t\t\t\t\t<p title=\"currency exchange rate\">exchange rate not available</p>\n\t\t\t\t)}\n\t\t\t</CurrencyCardText>\n\t\t</CurrencyCardContainer>\n\t)\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { CurrencyId, ExchangeRates } from '../types'\n\nimport { containerStyles, SPACING_UNIT } from '../theme'\nimport { CurrencyCard } from './CurrencyCard'\n\nconst CurrencyCardsContainer = styled.div`\n\t${containerStyles};\n\tdisplay: flex;\n\tflex-direction: column;\n\t& > * {\n\t\t&:not(:first-of-type) {\n\t\t\tmargin-top: ${SPACING_UNIT}rem;\n\t\t}\n\t}\n`\n\ntype CurrencyCardsProps = {\n\texchangeRates: ExchangeRates[]\n\tbaseCurrency: CurrencyId\n}\n\n/**\n * Renders CurrencyCards for the exchangeRates passed in\n */\nexport const CurrencyCards = ({ exchangeRates, baseCurrency }: CurrencyCardsProps) => {\n\treturn (\n\t\t<CurrencyCardsContainer>\n\t\t\t{exchangeRates.map(exchangeRates => (\n\t\t\t\t<CurrencyCard key={exchangeRates.currency} baseCurrency={baseCurrency} exchangeRates={exchangeRates} />\n\t\t\t))}\n\t\t</CurrencyCardsContainer>\n\t)\n}\n","import FX_API_RESPONSE from './fx.json'\n\nimport { InstituteId, ISO8601Date, CurrencyId, ExchangeRates } from '../types'\n\ntype FxApiResponse = {\n\tinstitute: InstituteId\n\tlastUpdated: ISO8601Date\n\tcomparisonDate: ISO8601Date\n\tbaseCurrency: CurrencyId\n\tfx: ExchangeRates[]\n}\n\nexport const getFx = async (): Promise<FxApiResponse> => {\n\tconst response: FxApiResponse = FX_API_RESPONSE\n\treturn response\n}\n","import React from 'react'\nimport { useState, useEffect, useCallback } from 'react'\nimport styled from '@emotion/styled'\n\nimport { ExchangeRates } from '../types'\n\nimport { containerStyles, SPACING_UNIT } from '../theme'\n\nimport { CurrencyCards } from '../components/CurrencyCards'\nimport { useExchangeRates } from '../hooks/use-exchange-rates'\n\n/**\n * Istead of full-blown theming, static constants are used.\n * The same values can be retrieved from a theme provider later if dynamic theming is needed.\n */\n\nconst AppHeader = styled.header`\n\tbackground: black;\n\tcolor: white;\n\tposition: sticky;\n\ttop: 0;\n`\nconst AppTitle = styled.h1`\n\tdisplay: block;\n\t${containerStyles};\n`\n\nconst ContainerPlaceholder = styled.div`\n\t${containerStyles};\n`\n\nconst SearchContainer = styled.div`\n\t${containerStyles};\n\tdisplay: flex;\n`\n\nconst SearchInput = styled.input`\n\twidth: 100%;\n\tbox-sizing: border-box;\n\tfont-size: ${SPACING_UNIT}rem;\n\tmargin: 0;\n\tpadding: ${SPACING_UNIT / 2}rem ${SPACING_UNIT}rem 0 ${SPACING_UNIT}rem;\n\tbackground: white;\n\tcolor: black;\n\n\t&::placeholder {\n\t\tcolor: black;\n\t\topacity: 0.7;\n\t}\n\t&:focus::placeholder {\n\t\tcolor: transparent;\n\t}\n\n\tborder: none;\n\toutline: none;\n\tborder-radius: 0;\n\t&:-webkit-autofill,\n\t&:-webkit-autofill:hover,\n\t&:-webkit-autofill:focus {\n\t\tbackground-color: white !important;\n\t\tcolor: black !important;\n\t\t-webkit-box-shadow: 0 0 0 62.5rem white inset;\n\t}\n`\n\nconst filterSearchResults = (queryFragment: string) => (exchangeRates: ExchangeRates): Boolean =>\n\tBoolean(\n\t\t// UPPERCASE matches currency code\n\t\texchangeRates.currency.includes(queryFragment) ||\n\t\t\t// lowercase matches currency name\n\t\t\t(exchangeRates.nameI18N && exchangeRates.nameI18N.toLowerCase().includes(queryFragment))\n\t)\n\nexport const App = () => {\n\tconst [queryFragment, setQueryFragment] = useState<string>('')\n\tconst exchangeRates = useExchangeRates()\n\tconst handleSearchInputChange = useCallback(event => setQueryFragment(event.target.value), [])\n\n\tconst visibleExchangeRates = exchangeRates ? exchangeRates.filter(filterSearchResults(queryFragment)) : null\n\n\treturn (\n\t\t<>\n\t\t\t<AppHeader>\n\t\t\t\t<AppTitle>Exchange Rates</AppTitle>\n\t\t\t\t<SearchContainer>\n\t\t\t\t\t<SearchInput placeholder={'... search'} value={queryFragment} onChange={handleSearchInputChange} />\n\t\t\t\t</SearchContainer>\n\t\t\t</AppHeader>\n\t\t\t{visibleExchangeRates && visibleExchangeRates.length ? (\n\t\t\t\t<CurrencyCards baseCurrency={'EUR'} exchangeRates={visibleExchangeRates} />\n\t\t\t) : (\n\t\t\t\t// NOTE: a different message should be displayed for different states for better UX,\n\t\t\t\t// but this is technically correct, and does the job for now :D\n\t\t\t\t<ContainerPlaceholder>no matches or data :(</ContainerPlaceholder>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import { getFx } from '../api/fx'\nimport { useState, useEffect } from 'react'\n\nimport { ExchangeRates } from '../types'\n\n/**\n * There's no state managment solution used in this tiny app to move this logic to, so it gets its own hook!\n */\nexport const useExchangeRates = () => {\n\tconst [exchangeRates, setExchangeRates] = useState<ExchangeRates[] | null>(null)\n\tuseEffect(() => {\n\t\tgetFx().then(apiResponse => setExchangeRates(apiResponse.fx))\n\t}, [])\n\treturn exchangeRates\n}\n","import { css, Global } from '@emotion/react'\n\nconst globalStyles = css`\n\tbody {\n\t\tmargin: 0;\n\t\tfont-family: sans-serif;\n\t}\n`\n\nexport const GlobalStyles = () => <Global styles={globalStyles} />\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './components/App'\nimport { GlobalStyles } from './components/GlobalStyles'\n\n// this is critical for layout, and we need it to run before anything renders to avoid a flash\nfunction adjustRem() {\n\tif (window.innerWidth < 1440) {\n\t\tdocument.documentElement.style.fontSize = '16px'\n\t} else {\n\t\tdocument.documentElement.style.fontSize = window.innerWidth / 90 + 'px'\n\t}\n}\nadjustRem()\nwindow.addEventListener('resize', adjustRem)\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<GlobalStyles />\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}